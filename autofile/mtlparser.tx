// Adapted from OSXPhotos Metadata Template Language (MTL)
// a TemplateString has format:
// pre{delim+template_field:subfield|filter[find,replace] conditional?bool_value,default}post
// a TemplateStatement may contain zero or more TemplateStrings
// The pre and post are optional strings
// The template itself (inside the {}) is also optional but if present
// everything but template_field is also optional
// This is identical to OSXPhotos MTL with exception of path_sep which has been removed

Statement:
    (template_strings+=TemplateString)?
;

TemplateString:
    pre=NON_TEMPLATE_STRING?
    template=Template?
    post=NON_TEMPLATE_STRING?
;

Template:
    (
    "{"
    delim=Delim
    field=Field
    subfield=SubField
    filter=Filter
    findreplace=FindReplace
    conditional=Conditional
    bool=Boolean
    default=Default
    "}"
    )?
;

NON_TEMPLATE_STRING:
    /[^\{\},\?\|]*/
;

Delim:
    (
    (value=DELIM_WORD)?
    '+'
    )?
;

DELIM_WORD:
    /[^\{\}]*(?=\+\w)/
;

Field:
    FIELD_WORD+
;

FIELD_WORD:
    /[\%]?[\.\w]+/
;

SubField:
    (
    ":"-
    SUBFIELD_WORD+
    )?
;

SUBFIELD_WORD:
    /[\.\w:\/\-\~\'\"\%\@\#\^\â€™]+/
    /\\\s/?
;

Filter:
    (
    "|"-
    (value+=FILTER_FUNCTION['|'])?
    )?
;

FILTER_FUNCTION:
    /[\.\w:\/]+(\([^\)]*\))?/
;

Conditional:
    (
    (" "+)-
    (negation=NEGATION)?
    (operator=OPERATOR)
    (" "+)-
    (value+=Statement['|'])
    )?
;

NEGATION:
    "not "
;

OPERATOR:
    "contains" | "matches" | "startswith" | "endswith" | "<=" | ">=" | "<" | ">" | "==" | "!="
;

FindReplace:
    (
    "["
    (pairs+=FindReplacePair['|'])?
    "]"
    )?
;

FindReplacePair:
    find=FIND_WORD
    ","
    (replace=REPLACE_WORD)?
;

FIND_WORD:
    /[^\[\]\|]*(?=\,)/
;

REPLACE_WORD:
    /[^\[\]\|]*/
;


Boolean:
    (
    "?"
    (value=Statement)?
    )?
;

Default:
    (
    ","
    (value=Statement)?
    )?
;
